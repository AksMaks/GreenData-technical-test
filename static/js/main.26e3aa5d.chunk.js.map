{"version":3,"sources":["logo.svg","api/localStorage.js","api/interface.js","store/people.js","store/mode.js","components/TableWorkmans.jsx","components/FormWorkman.jsx","components/DetailsWorkman.jsx","App.js","reportWebVitals.js","index.js"],"names":["temp","JSON","parse","localStorage","getItem","console","log","newWorkman","countId","workmans","Colleagues","forEach","el","Status","push","Id1","Id2","Id","setItem","stringify","changeWorkman","filter","map","IdWorkman","elf","Name","Surname","Position","find","TypeError","makeAutoObservable","this","api","getPeople","addWorkman","changeWorman","removeWorkman","getWorkmanColleagues","mode","workman","MiddleName","DateBirth","Gender","EmploymentDate","DateOfDismissal","DriverLicense","OtherAttributes","Type","Value","newMode","currentColleagues","ind","newAttribute","splice","defWorkman","TableWorkmans","observer","props","useReducer","x","forceUpdate","Container","className","Button","onClick","setMode","people","getCurrentWorkmanColleagues","Table","striped","bordered","hover","size","responsive","style","minWidth","overflowX","getWorkmans","width","FormWorkman","Form","onSubmit","event","action","preventDefault","Group","Label","Control","type","placeholder","required","value","onChange","e","setWorkman","target","as","disabled","Date","getTime","controlId","Check","label","checked","multiple","changeColleagues","options","option","selected","length","setOtherAttribute","removeOtherAttribute","addOtherAttribute","variant","text","DetailsWorkman","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26e3aa5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import interfase from \"./interface\"\r\n\r\nclass interfseLocalstorage extends interfase{\r\n    constructor(){\r\n        super()\r\n    }\r\n    getPeople(){\r\n        let temp = JSON.parse(localStorage.getItem('workmans'))\r\n        console.log(temp)\r\n        return (temp)? temp: []\r\n    }\r\n    addWorkman(newWorkman){\r\n        let countId = (localStorage.getItem('countId'))? localStorage.getItem('countId'): 0\r\n        countId++\r\n        let workmans = (JSON.parse(localStorage.getItem('workmans')))? JSON.parse(localStorage.getItem('workmans')): []\r\n        let Colleagues = (JSON.parse(localStorage.getItem('Colleagues')))? JSON.parse(localStorage.getItem('Colleagues')): []\r\n\r\n        newWorkman.Colleagues.forEach(el => {\r\n            if(el.Status){\r\n                Colleagues.push({Id1: countId, Id2: el.Id})\r\n            }\r\n        });\r\n        workmans.push({...newWorkman, Id: countId})\r\n\r\n        localStorage.setItem('countId', countId)\r\n        localStorage.setItem('workmans', JSON.stringify(workmans))\r\n        localStorage.setItem('Colleagues', JSON.stringify(Colleagues))\r\n\r\n        localStorage.countId++\r\n\r\n    }\r\n    changeWorman(changeWorkman){\r\n        let workmans = (JSON.parse(localStorage.getItem('workmans')))? JSON.parse(localStorage.getItem('workmans')): []\r\n        let Colleagues = (JSON.parse(localStorage.getItem('Colleagues')))? JSON.parse(localStorage.getItem('Colleagues')): []\r\n        \r\n        Colleagues = Colleagues.filter(el => el.Id1 !== changeWorkman.Id && el.Id2 !== changeWorkman.Id)\r\n      \r\n        changeWorkman.Colleagues.forEach(el => {\r\n            if(el.Status){\r\n                Colleagues.push({Id1: changeWorkman.Id, Id2: el.Id})\r\n            }\r\n        });\r\n\r\n        workmans = workmans.map(el => {\r\n            if(el.Id != changeWorkman.Id){\r\n                return el\r\n            }else{\r\n                return changeWorkman\r\n            }\r\n        })\r\n        \r\n        localStorage.setItem('workmans', JSON.stringify(workmans))\r\n        localStorage.setItem('Colleagues', JSON.stringify(Colleagues))\r\n    }\r\n    removeWorkman(IdWorkman){\r\n        let workmans = (JSON.parse(localStorage.getItem('workmans')))? JSON.parse(localStorage.getItem('workmans')): []\r\n        let Colleagues = (JSON.parse(localStorage.getItem('Colleagues')))? JSON.parse(localStorage.getItem('Colleagues')): []\r\n\r\n        workmans = workmans.filter(el => el.Id !== IdWorkman)\r\n        Colleagues = Colleagues.filter(el => el.Id1 !== IdWorkman && el.Id2 !== IdWorkman)\r\n        \r\n        localStorage.setItem('workmans', JSON.stringify(workmans))\r\n        localStorage.setItem('Colleagues', JSON.stringify(Colleagues))\r\n    }\r\n    getWorkmanColleagues(IdWorkman){\r\n        let workmans = (JSON.parse(localStorage.getItem('workmans')))? JSON.parse(localStorage.getItem('workmans')): []\r\n        let Colleagues = (JSON.parse(localStorage.getItem('Colleagues')))? JSON.parse(localStorage.getItem('Colleagues')): []\r\n\r\n        let temp = workmans.filter(elf => elf.Id != IdWorkman).map(el => {\r\n            return {\r\n                Id: el.Id,\r\n                Name: `${el.Surname} ${el.Name}, ${el.Position}`,\r\n                Status: !!(Colleagues.find(elf => elf.Id1 == el.Id && elf.Id2 == IdWorkman || elf.Id2 == el.Id && elf.Id1 == IdWorkman))\r\n            }\r\n        })\r\n        return temp;\r\n    }\r\n}\r\n\r\nexport default new interfseLocalstorage()","class interfase {\r\n    constructor(){\r\n    }\r\n    getPeople (){\r\n        throw new TypeError(\"Cannot use Abstract method directly\");\r\n    }\r\n    addWorkman (){\r\n        throw new TypeError(\"Cannot use Abstract method directly\");\r\n    }\r\n    changeWorman (){\r\n        throw new TypeError(\"Cannot use Abstract method directly\");\r\n    }\r\n    removeWorkman (){\r\n        throw new TypeError(\"Cannot use Abstract method directly\");\r\n    }\r\n    getWorkmanColleagues (){\r\n        throw new TypeError(\"Cannot use Abstract method directly\");\r\n    }\r\n}\r\n\r\nexport default interfase","import {makeAutoObservable} from \"mobx\";\r\nimport api from \"../api/localStorage.js\";\r\nclass People {\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n    getWorkmans(){\r\n        return api.getPeople()\r\n    }\r\n    addWorkman(newWorkman){\r\n        api.addWorkman(newWorkman)\r\n    }\r\n    changeWorkman(changeWorkman){\r\n        api.changeWorman(changeWorkman)\r\n    }\r\n    removeWorkman(IdWorkman){\r\n        api.removeWorkman(IdWorkman)\r\n    }\r\n    getCurrentWorkmanColleagues (IdWorkman){\r\n        return api.getWorkmanColleagues(IdWorkman)\r\n    }\r\n}\r\n\r\nexport default new People()\r\n\r\n","import {makeAutoObservable} from \"mobx\";\r\n\r\nclass Mode {\r\n    mode = \"Table\"\r\n    workman = {\r\n        Surname: \"Попов123\",\r\n        Name: \"Вася123\",\r\n        MiddleName: \"Николаевич\",\r\n        Position: \"Начальник СБ\",\r\n        DateBirth: \"2021-07-04\",\r\n        Gender: \"Муж\",\r\n        EmploymentDate: \"2021-07-04\",\r\n        DateOfDismissal: \"2021-07-04\",\r\n        DriverLicense: false,\r\n        Colleagues: [\r\n            {Id: 1, Name: \"Попов1 Вася1 Николаевич1\", Status: false},\r\n            {Id: 2, Name: \"Попов2 Вася2 Николаевич2\", Status: false}\r\n        ],\r\n        OtherAttributes: [{\r\n            Name: \"asd\",\r\n            Type: \"text\",\r\n            Value: \"asd\"\r\n        }]\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n    //Уствновка новых значение для перехода\r\n    setMode(newMode, newWorkman){\r\n        this.mode = newMode\r\n        this.workman = newWorkman\r\n        console.log(\"setMode\")\r\n    }\r\n    //Сохраниение нового работника\r\n    setWorkman(newWorkman){\r\n        this.workman = newWorkman\r\n    }\r\n    //изменение коллег по индексу\r\n    changeColleagues(currentColleagues){\r\n        this.workman.Colleagues.forEach(el => {\r\n            el.Status = false\r\n        })\r\n        currentColleagues.forEach(el => {\r\n            this.workman.Colleagues[el].Status = true\r\n        });\r\n        console.log(this.workman.Colleagues)\r\n        //this.workman.Colleagues[ind].Status = !this.workman.Colleagues[ind].Status\r\n    }\r\n    //добавление нового атрибута\r\n    addOtherAttribute(){\r\n        this.workman.OtherAttributes.push({\r\n            Name: \"\",\r\n            Type: \"text\",\r\n            Value: \"\"\r\n        })\r\n    }\r\n    //Сохраниение нового атрибута\r\n    setOtherAttribute(ind, newAttribute){\r\n        if(newAttribute.Type != this.workman.OtherAttributes[ind].Type){\r\n            if(newAttribute.Type == \"text\") newAttribute.Value = \"\"\r\n            if(newAttribute.Type == \"number\") newAttribute.Value = 0\r\n            if(newAttribute.Type == \"date\") newAttribute.Value = \"2021-01-01\"\r\n        }\r\n        this.workman.OtherAttributes[ind] = newAttribute\r\n    }\r\n    //Удаление атрибута\r\n    removeOtherAttribute(ind){\r\n        this.workman.OtherAttributes.splice(ind, 1)\r\n    }\r\n}\r\n\r\nexport default new Mode()\r\n\r\n","import React, {useReducer} from 'react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport people from '../store/people';\r\nimport mode from '../store/mode';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Table, Container  } from 'react-bootstrap';\r\n\r\nconst defWorkman = { \r\n    Surname: \"\",\r\n    Name: \"\",\r\n    MiddleName: \"\",\r\n    Position: \"ГСБ\",\r\n    DateBirth: \"2020-01-01\",\r\n    Gender: \"Муж\",\r\n    EmploymentDate: \"2020-01-01\",\r\n    DateOfDismissal: \"2020-01-01\",\r\n    DriverLicense: false,\r\n    Colleagues: [],\r\n    OtherAttributes: []\r\n}\r\n\r\nconst TableWorkmans = observer( (props) => {\r\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n    return (\r\n    <Container className=\"justify-content-sm-center mt-2\">\r\n        <Button className=\"mb-1\"\r\n            onClick={()=> mode.setMode(\"Add\", {...defWorkman, Colleagues: people.getCurrentWorkmanColleagues(null)})}\r\n            >Добавить\r\n        </Button>\r\n        <Table striped bordered hover size=\"sm\" responsive=\"sm\" style={{minWidth: \"700px\", overflowX: \"hidden\"}}>\r\n            <thead>\r\n                <tr>\r\n                    <th>Фамилия</th>\r\n                    <th>Имя</th>\r\n                    <th>Отчество</th>\r\n                    <th>Должность</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    people.getWorkmans().map(el => \r\n                        <tr key={el.Id}>\r\n                            <td>{el.Surname}</td>\r\n                            <td>{el.Name}</td>\r\n                            <td>{el.MiddleName}</td>\r\n                            <td>{el.Position}</td>\r\n                            <td style={{width: \"225px\" }}>\r\n                                <button style={{width: \"50px\"}} className={\"btn btn-secondary ml-1\"} onClick={()=> mode.setMode(\"Details\", {...el, Colleagues: people.getCurrentWorkmanColleagues(el.Id)})}>...</button>\r\n                                <button style={{width: \"50px\"}} className={\"btn btn-secondary ml-1\"} onClick={()=> mode.setMode(\"Change\", {...el, Colleagues: people.getCurrentWorkmanColleagues(el.Id)})}>Ред.</button>\r\n                                <button style={{width: \"100px\"}} className={\"btn btn-secondary ml-1\"} onClick={() => {people.removeWorkman(el.Id); forceUpdate()}}>Удалить</button> \r\n                            </td>               \r\n                        </tr>\r\n                    )\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    </Container>\r\n  );\r\n})\r\n\r\nexport default TableWorkmans;\r\n","import React, {useState} from 'react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport mode from '../store/mode';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button, Table} from 'react-bootstrap';\r\n\r\nconst FormWorkman = observer((props) => {\r\n    const handleSubmit = (event) => {\r\n        props.action(mode.workman)\r\n        mode.setMode(\"Table\", null)\r\n        event.preventDefault();\r\n    }\r\n    return(\r\n        <div style={{minWidth: \"350px\"}} className={\"container w-50 mt-2\"}>\r\n            <Button style={{width: \"100px\"}} className={\"mb-2\"} onClick={()=> mode.setMode(\"Table\", null)}>Назад</Button>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group>\r\n                    <Form.Label>Фамилия</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Фамилия\" required value={mode.workman.Surname} onChange={(e) => mode.setWorkman({...mode.workman, Surname: e.target.value})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Имя</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Имя\" required value={mode.workman.Name} onChange={(e) => mode.setWorkman({...mode.workman, Name: e.target.value})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Отчество</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Отчество\" required value={mode.workman.MiddleName} onChange={(e) => mode.setWorkman({...mode.workman, MiddleName: e.target.value})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Должность</Form.Label>\r\n                    <Form.Control as=\"select\" required value={mode.workman.Position} onChange={(e) => mode.setWorkman({...mode.workman, Position: e.target.value})}>\r\n                        <option disabled>Выберите должность</option>\r\n                        <option value=\"ГСБ\">ГСБ</option>\r\n                        <option value=\"ХОП\">ХОП</option>\r\n                        <option value=\"Клоун\">Клоун</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата рождения</Form.Label>\r\n                    <Form.Control type={\"date\"} required value={mode.workman.DateBirth} onChange={(e) => mode.setWorkman({...mode.workman, DateBirth: e.target.value})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата приема на работу</Form.Label>\r\n                    <Form.Control \r\n                        type={\"date\"} \r\n                        value={mode.workman.EmploymentDate} \r\n                        required \r\n                        onChange={(e) => {\r\n                            let EmploymentDate = new Date(e.target.value)\r\n                            let DateOfDismissal = new Date(mode.workman.DateOfDismissal)\r\n                            if(EmploymentDate.getTime() < DateOfDismissal.getTime()){\r\n                                mode.setWorkman({...mode.workman, EmploymentDate: e.target.value})\r\n                            }else{\r\n                                mode.setWorkman({...mode.workman, EmploymentDate: mode.workman.DateOfDismissal})\r\n                            }\r\n                        }}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Дата увольнения</Form.Label>\r\n                    <Form.Control \r\n                        type={\"date\"} \r\n                        value={mode.workman.DateOfDismissal} \r\n                        required \r\n                        onChange={\r\n                            (e) => {\r\n                                let EmploymentDate = new Date(mode.workman.EmploymentDate)\r\n                                let DateOfDismissal = new Date(e.target.value)\r\n                                console.log(EmploymentDate.getTime() < DateOfDismissal.getTime())\r\n                                if(EmploymentDate.getTime() < DateOfDismissal.getTime()){\r\n                                    mode.setWorkman({...mode.workman, DateOfDismissal: e.target.value})\r\n                                }else{\r\n                                    mode.setWorkman({...mode.workman, DateOfDismissal: mode.workman.EmploymentDate})\r\n                                }\r\n                            }}/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"DriverLicense\">\r\n                    <Form.Check type=\"checkbox\" label=\"Наличие прав\" checked={!!mode.workman.DriverLicense} onChange={(e) => mode.setWorkman({...mode.workman, DriverLicense: !mode.workman.DriverLicense})}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Коллеги</Form.Label>\r\n                    <Form.Control as=\"select\" multiple onChange={e => mode.changeColleagues([...e.target.options].filter(option => option.selected).map(x => x.value))}>\r\n                        {mode.workman.Colleagues.map((el, ind) => {\r\n                            return (\r\n                                <option key={ind} value={ind} selected={el.Status}>{el.Name}</option>\r\n                            )\r\n                        })}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <div>\r\n                    <div>\r\n                        <Form.Label>Дополнительные атрибуты</Form.Label>\r\n                    </div>\r\n                    {!!mode.workman.OtherAttributes.length &&\r\n                    <Table className={\"table\"} style={{overflowX: \"auto\"}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Имя\r\n                                </th>\r\n                                <th>\r\n                                    Тип\r\n                                </th>\r\n                                <th>\r\n                                    Значание\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {mode.workman.OtherAttributes.map((el, ind) => {\r\n                            return(\r\n                                <tr key={`OA${ind}`} >\r\n                                    <td>\r\n                                        <Form.Control \r\n                                            type={\"text\"}\r\n                                            value={el.Name}\r\n                                            style={{width: \"100%\", minWidth: \"100px\"}}\r\n                                            onChange={(e) => mode.setOtherAttribute(ind, {...el, Name: e.target.value})}/>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Control style={{width: \"100%\", minWidth: \"100px\"}} as=\"select\" value={el.Type} onChange={(e) => mode.setOtherAttribute(ind, {...el, Type: e.target.value})}>\r\n                                            <option value=\"text\">Text</option>\r\n                                            <option value=\"number\">Num</option>\r\n                                            <option value=\"date\">Date</option>\r\n                                        </Form.Control>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Form.Control style={{width: \"100%\", minWidth: \"100px\"}} type={el.Type} value={el.Value} onChange={(e) => mode.setOtherAttribute(ind, {...el, Value: e.target.value})}/>\r\n                                    </td>\r\n                                    <td >\r\n                                        <Button className=\"float-right\" style={{width: \"100px\"}} onClick={() => mode.removeOtherAttribute(ind)}>Удалить</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n                    }\r\n                    <Button onClick={() => mode.addOtherAttribute()}>Добавить атрибут</Button>\r\n                </div>\r\n                <div>\r\n                    <Button className=\"float-right mr-3 mt-2 mb-3\" size=\"lg\" type=\"submit\" variant=\"primary\">{props.text}</Button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default FormWorkman;","import React from 'react';\r\nimport {observer} from 'mobx-react-lite';\r\nimport mode from '../store/mode';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Button, Table} from 'react-bootstrap';\r\n\r\nconst style = {\r\n    table: {\r\n        minWidth: \"700px\",\r\n        overflowX: \"hidden\"\r\n    }\r\n}\r\n\r\nconst DetailsWorkman = observer( (props) => {\r\n  return (\r\n    <div  style={{minWidth: \"350px\"}} className={\"container w-50 mt-2\"}>\r\n        <Button style={{width: \"100px\"}} className={\"mb-2\"} onClick={()=> mode.setMode(\"Table\", null)}>Назад</Button>\r\n        <Table size=\"sm\"  style={{minWidth: \"700px\", overflowX: \"hidden\"}}>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Фамилия</td>\r\n                    <td>{props.el.Surname}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Имя</td>\r\n                    <td>{props.el.Name}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Отчество</td>\r\n                    <td>{props.el.MiddleName}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Должность</td>\r\n                    <td >{props.el.Position}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Дата рождения</td>\r\n                    <td>{props.el.DateBirth}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Пол</td>\r\n                    <td>{props.el.Gender}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Дата приема на работу</td>\r\n                    <td>{props.el.EmploymentDate}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Дата увольнения</td>\r\n                    <td>{props.el.DateOfDismissal}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Наличие прав</td>\r\n                    <td>{props.el.DriverLicense? \"Есть\": \"Нет\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Коллеги</td>\r\n                    <td>\r\n                        {\r\n                            props.el.Colleagues.filter(elf => elf.Status).map((el, ind) => {\r\n                                return (\r\n                                    <div key={ind}>{el.Name}</div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </td>\r\n                </tr>\r\n                {!!props.el.OtherAttributes.length && props.el.OtherAttributes.map((el, ind) => {\r\n                    return (\r\n                        <tr key={ind}>\r\n                            <td>{el.Name}</td>\r\n                            <td>{el.Value}</td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n        <style>{\"\\\r\n        td{\\\r\n            width: 300px;\\\r\n        }\\\r\n      \"}</style>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default DetailsWorkman;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport TableWorkmans from './components/TableWorkmans.jsx'\nimport FormWorkman from './components/FormWorkman.jsx'\nimport DetailsWorkman from './components/DetailsWorkman.jsx'\n\nimport mode from './store/mode';\nimport people from './store/people';\nimport {observer} from 'mobx-react-lite';\n\nconst defWorkman = { \n  Surname: \"\",\n  Name: \"\",\n  MiddleName: \"\",\n  Position: \"ГСБ\",\n  DateBirth: \"2000-01-01\",\n  Gender: \"Муж\",\n  EmploymentDate: \"2000-01-01\",\n  DateOfDismissal: \"2000-01-01\",\n  DriverLicense: false,\n  Colleagues: []\n}\n\nconst App = observer(() => {\n  return (\n    <div className=\"App\">\n      {mode.mode == \"Table\" && <TableWorkmans/>}\n      {mode.mode == \"Details\" && <DetailsWorkman el={mode.workman}/>}\n      {mode.mode == \"Add\" && <FormWorkman text={\"Добавить\"} action={(el) => people.addWorkman(el)}/>}\n      {mode.mode == \"Change\" && <FormWorkman text={\"Изменить\"} action={(el) => people.changeWorkman(el)}/>}\n    </div>\n  );\n})\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}